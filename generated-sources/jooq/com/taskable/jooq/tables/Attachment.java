/*
 * This file is generated by jOOQ.
 */
package com.taskable.jooq.tables;


import com.taskable.jooq.Indexes;
import com.taskable.jooq.Keys;
import com.taskable.jooq.Testdb;
import com.taskable.jooq.tables.Project.ProjectPath;
import com.taskable.jooq.tables.Subtask.SubtaskPath;
import com.taskable.jooq.tables.Template.TemplatePath;
import com.taskable.jooq.tables.records.AttachmentRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Attachment extends TableImpl<AttachmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testdb.attachment</code>
     */
    public static final Attachment ATTACHMENT = new Attachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttachmentRecord> getRecordType() {
        return AttachmentRecord.class;
    }

    /**
     * The column <code>testdb.attachment.id</code>.
     */
    public final TableField<AttachmentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>testdb.attachment.project_id</code>.
     */
    public final TableField<AttachmentRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>testdb.attachment.template_id</code>.
     */
    public final TableField<AttachmentRecord, Integer> TEMPLATE_ID = createField(DSL.name("template_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>testdb.attachment.subtask_id</code>.
     */
    public final TableField<AttachmentRecord, Integer> SUBTASK_ID = createField(DSL.name("subtask_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>testdb.attachment.type</code>.
     */
    public final TableField<AttachmentRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>testdb.attachment.url</code>.
     */
    public final TableField<AttachmentRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(1000), this, "");

    private Attachment(Name alias, Table<AttachmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Attachment(Name alias, Table<AttachmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testdb.attachment</code> table reference
     */
    public Attachment(String alias) {
        this(DSL.name(alias), ATTACHMENT);
    }

    /**
     * Create an aliased <code>testdb.attachment</code> table reference
     */
    public Attachment(Name alias) {
        this(alias, ATTACHMENT);
    }

    /**
     * Create a <code>testdb.attachment</code> table reference
     */
    public Attachment() {
        this(DSL.name("attachment"), null);
    }

    public <O extends Record> Attachment(Table<O> path, ForeignKey<O, AttachmentRecord> childPath, InverseForeignKey<O, AttachmentRecord> parentPath) {
        super(path, childPath, parentPath, ATTACHMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AttachmentPath extends Attachment implements Path<AttachmentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AttachmentPath(Table<O> path, ForeignKey<O, AttachmentRecord> childPath, InverseForeignKey<O, AttachmentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AttachmentPath(Name alias, Table<AttachmentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AttachmentPath as(String alias) {
            return new AttachmentPath(DSL.name(alias), this);
        }

        @Override
        public AttachmentPath as(Name alias) {
            return new AttachmentPath(alias, this);
        }

        @Override
        public AttachmentPath as(Table<?> alias) {
            return new AttachmentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testdb.TESTDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ATTACHMENT_PROJECT_ID, Indexes.ATTACHMENT_SUBTASK_ID, Indexes.ATTACHMENT_TEMPLATE_ID);
    }

    @Override
    public Identity<AttachmentRecord, Integer> getIdentity() {
        return (Identity<AttachmentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AttachmentRecord> getPrimaryKey() {
        return Keys.KEY_ATTACHMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<AttachmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ATTACHMENT_IBFK_1, Keys.ATTACHMENT_IBFK_2, Keys.ATTACHMENT_IBFK_3);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>testdb.project</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.ATTACHMENT_IBFK_1, null);

        return _project;
    }

    private transient TemplatePath _template;

    /**
     * Get the implicit join path to the <code>testdb.template</code> table.
     */
    public TemplatePath template() {
        if (_template == null)
            _template = new TemplatePath(this, Keys.ATTACHMENT_IBFK_2, null);

        return _template;
    }

    private transient SubtaskPath _subtask;

    /**
     * Get the implicit join path to the <code>testdb.subtask</code> table.
     */
    public SubtaskPath subtask() {
        if (_subtask == null)
            _subtask = new SubtaskPath(this, Keys.ATTACHMENT_IBFK_3, null);

        return _subtask;
    }

    @Override
    public Attachment as(String alias) {
        return new Attachment(DSL.name(alias), this);
    }

    @Override
    public Attachment as(Name alias) {
        return new Attachment(alias, this);
    }

    @Override
    public Attachment as(Table<?> alias) {
        return new Attachment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(String name) {
        return new Attachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(Name name) {
        return new Attachment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(Table<?> name) {
        return new Attachment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Attachment where(Condition condition) {
        return new Attachment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Attachment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Attachment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Attachment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Attachment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Attachment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Attachment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Attachment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Attachment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Attachment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
