/*
 * This file is generated by jOOQ.
 */
package com.taskable.jooq.tables;


import com.taskable.jooq.Indexes;
import com.taskable.jooq.Keys;
import com.taskable.jooq.Testdb;
import com.taskable.jooq.tables.Project.ProjectPath;
import com.taskable.jooq.tables.Subtask.SubtaskPath;
import com.taskable.jooq.tables.records.TaskRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task extends TableImpl<TaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testdb.task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The column <code>testdb.task.id</code>.
     */
    public final TableField<TaskRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>testdb.task.project_id</code>.
     */
    public final TableField<TaskRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>testdb.task.title</code>.
     */
    public final TableField<TaskRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>testdb.task.description</code>.
     */
    public final TableField<TaskRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testdb.task.color</code>.
     */
    public final TableField<TaskRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(30), this, "");

    private Task(Name alias, Table<TaskRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Task(Name alias, Table<TaskRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testdb.task</code> table reference
     */
    public Task(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>testdb.task</code> table reference
     */
    public Task(Name alias) {
        this(alias, TASK);
    }

    /**
     * Create a <code>testdb.task</code> table reference
     */
    public Task() {
        this(DSL.name("task"), null);
    }

    public <O extends Record> Task(Table<O> path, ForeignKey<O, TaskRecord> childPath, InverseForeignKey<O, TaskRecord> parentPath) {
        super(path, childPath, parentPath, TASK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TaskPath extends Task implements Path<TaskRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TaskPath(Table<O> path, ForeignKey<O, TaskRecord> childPath, InverseForeignKey<O, TaskRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TaskPath(Name alias, Table<TaskRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TaskPath as(String alias) {
            return new TaskPath(DSL.name(alias), this);
        }

        @Override
        public TaskPath as(Name alias) {
            return new TaskPath(alias, this);
        }

        @Override
        public TaskPath as(Table<?> alias) {
            return new TaskPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testdb.TESTDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TASK_PROJECT_ID);
    }

    @Override
    public Identity<TaskRecord, Integer> getIdentity() {
        return (Identity<TaskRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.KEY_TASK_PRIMARY;
    }

    @Override
    public List<ForeignKey<TaskRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK_IBFK_1);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>testdb.project</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.TASK_IBFK_1, null);

        return _project;
    }

    private transient SubtaskPath _subtask;

    /**
     * Get the implicit to-many join path to the <code>testdb.subtask</code>
     * table
     */
    public SubtaskPath subtask() {
        if (_subtask == null)
            _subtask = new SubtaskPath(this, null, Keys.SUBTASK_IBFK_1.getInverseKey());

        return _subtask;
    }

    @Override
    public Task as(String alias) {
        return new Task(DSL.name(alias), this);
    }

    @Override
    public Task as(Name alias) {
        return new Task(alias, this);
    }

    @Override
    public Task as(Table<?> alias) {
        return new Task(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Name name) {
        return new Task(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Table<?> name) {
        return new Task(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task where(Condition condition) {
        return new Task(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Task where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Task where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Task where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Task where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
