/*
 * This file is generated by jOOQ.
 */
package com.taskable.jooq.tables;


import com.taskable.jooq.Indexes;
import com.taskable.jooq.Keys;
import com.taskable.jooq.Testdb;
import com.taskable.jooq.tables.ProjectUser.ProjectUserPath;
import com.taskable.jooq.tables.Subtask.SubtaskPath;
import com.taskable.jooq.tables.records.SubtaskAssigneeRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SubtaskAssignee extends TableImpl<SubtaskAssigneeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testdb.subtask_assignee</code>
     */
    public static final SubtaskAssignee SUBTASK_ASSIGNEE = new SubtaskAssignee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubtaskAssigneeRecord> getRecordType() {
        return SubtaskAssigneeRecord.class;
    }

    /**
     * The column <code>testdb.subtask_assignee.user_id</code>.
     */
    public final TableField<SubtaskAssigneeRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>testdb.subtask_assignee.project_id</code>.
     */
    public final TableField<SubtaskAssigneeRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>testdb.subtask_assignee.subtask_id</code>.
     */
    public final TableField<SubtaskAssigneeRecord, Integer> SUBTASK_ID = createField(DSL.name("subtask_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private SubtaskAssignee(Name alias, Table<SubtaskAssigneeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SubtaskAssignee(Name alias, Table<SubtaskAssigneeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testdb.subtask_assignee</code> table reference
     */
    public SubtaskAssignee(String alias) {
        this(DSL.name(alias), SUBTASK_ASSIGNEE);
    }

    /**
     * Create an aliased <code>testdb.subtask_assignee</code> table reference
     */
    public SubtaskAssignee(Name alias) {
        this(alias, SUBTASK_ASSIGNEE);
    }

    /**
     * Create a <code>testdb.subtask_assignee</code> table reference
     */
    public SubtaskAssignee() {
        this(DSL.name("subtask_assignee"), null);
    }

    public <O extends Record> SubtaskAssignee(Table<O> path, ForeignKey<O, SubtaskAssigneeRecord> childPath, InverseForeignKey<O, SubtaskAssigneeRecord> parentPath) {
        super(path, childPath, parentPath, SUBTASK_ASSIGNEE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SubtaskAssigneePath extends SubtaskAssignee implements Path<SubtaskAssigneeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SubtaskAssigneePath(Table<O> path, ForeignKey<O, SubtaskAssigneeRecord> childPath, InverseForeignKey<O, SubtaskAssigneeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SubtaskAssigneePath(Name alias, Table<SubtaskAssigneeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SubtaskAssigneePath as(String alias) {
            return new SubtaskAssigneePath(DSL.name(alias), this);
        }

        @Override
        public SubtaskAssigneePath as(Name alias) {
            return new SubtaskAssigneePath(alias, this);
        }

        @Override
        public SubtaskAssigneePath as(Table<?> alias) {
            return new SubtaskAssigneePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testdb.TESTDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SUBTASK_ASSIGNEE_SUBTASK_ID);
    }

    @Override
    public UniqueKey<SubtaskAssigneeRecord> getPrimaryKey() {
        return Keys.KEY_SUBTASK_ASSIGNEE_PRIMARY;
    }

    @Override
    public List<ForeignKey<SubtaskAssigneeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SA_PJ, Keys.SUBTASK_ASSIGNEE_IBFK_1);
    }

    private transient ProjectUserPath _projectUser;

    /**
     * Get the implicit join path to the <code>testdb.project_user</code> table.
     */
    public ProjectUserPath projectUser() {
        if (_projectUser == null)
            _projectUser = new ProjectUserPath(this, Keys.FK_SA_PJ, null);

        return _projectUser;
    }

    private transient SubtaskPath _subtask;

    /**
     * Get the implicit join path to the <code>testdb.subtask</code> table.
     */
    public SubtaskPath subtask() {
        if (_subtask == null)
            _subtask = new SubtaskPath(this, Keys.SUBTASK_ASSIGNEE_IBFK_1, null);

        return _subtask;
    }

    @Override
    public SubtaskAssignee as(String alias) {
        return new SubtaskAssignee(DSL.name(alias), this);
    }

    @Override
    public SubtaskAssignee as(Name alias) {
        return new SubtaskAssignee(alias, this);
    }

    @Override
    public SubtaskAssignee as(Table<?> alias) {
        return new SubtaskAssignee(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubtaskAssignee rename(String name) {
        return new SubtaskAssignee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubtaskAssignee rename(Name name) {
        return new SubtaskAssignee(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubtaskAssignee rename(Table<?> name) {
        return new SubtaskAssignee(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubtaskAssignee where(Condition condition) {
        return new SubtaskAssignee(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubtaskAssignee where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubtaskAssignee where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubtaskAssignee where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubtaskAssignee where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubtaskAssignee where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubtaskAssignee where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubtaskAssignee where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubtaskAssignee whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubtaskAssignee whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
