/*
 * This file is generated by jOOQ.
 */
package com.taskable.jooq.tables;


import com.taskable.jooq.Indexes;
import com.taskable.jooq.Keys;
import com.taskable.jooq.Testdb;
import com.taskable.jooq.tables.Classroom.ClassroomPath;
import com.taskable.jooq.tables.User.UserPath;
import com.taskable.jooq.tables.records.AnnouncementRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Announcement extends TableImpl<AnnouncementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testdb.announcement</code>
     */
    public static final Announcement ANNOUNCEMENT = new Announcement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnouncementRecord> getRecordType() {
        return AnnouncementRecord.class;
    }

    /**
     * The column <code>testdb.announcement.id</code>.
     */
    public final TableField<AnnouncementRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>testdb.announcement.classroom_id</code>.
     */
    public final TableField<AnnouncementRecord, Integer> CLASSROOM_ID = createField(DSL.name("classroom_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>testdb.announcement.user_id</code>.
     */
    public final TableField<AnnouncementRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>testdb.announcement.title</code>.
     */
    public final TableField<AnnouncementRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>testdb.announcement.message</code>.
     */
    public final TableField<AnnouncementRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>testdb.announcement.sent_at</code>.
     */
    public final TableField<AnnouncementRecord, LocalDateTime> SENT_AT = createField(DSL.name("sent_at"), SQLDataType.LOCALDATETIME(0), this, "");

    private Announcement(Name alias, Table<AnnouncementRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Announcement(Name alias, Table<AnnouncementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testdb.announcement</code> table reference
     */
    public Announcement(String alias) {
        this(DSL.name(alias), ANNOUNCEMENT);
    }

    /**
     * Create an aliased <code>testdb.announcement</code> table reference
     */
    public Announcement(Name alias) {
        this(alias, ANNOUNCEMENT);
    }

    /**
     * Create a <code>testdb.announcement</code> table reference
     */
    public Announcement() {
        this(DSL.name("announcement"), null);
    }

    public <O extends Record> Announcement(Table<O> path, ForeignKey<O, AnnouncementRecord> childPath, InverseForeignKey<O, AnnouncementRecord> parentPath) {
        super(path, childPath, parentPath, ANNOUNCEMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AnnouncementPath extends Announcement implements Path<AnnouncementRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AnnouncementPath(Table<O> path, ForeignKey<O, AnnouncementRecord> childPath, InverseForeignKey<O, AnnouncementRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AnnouncementPath(Name alias, Table<AnnouncementRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AnnouncementPath as(String alias) {
            return new AnnouncementPath(DSL.name(alias), this);
        }

        @Override
        public AnnouncementPath as(Name alias) {
            return new AnnouncementPath(alias, this);
        }

        @Override
        public AnnouncementPath as(Table<?> alias) {
            return new AnnouncementPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testdb.TESTDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ANNOUNCEMENT_CLASSROOM_ID, Indexes.ANNOUNCEMENT_USER_ID);
    }

    @Override
    public Identity<AnnouncementRecord, Integer> getIdentity() {
        return (Identity<AnnouncementRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnouncementRecord> getPrimaryKey() {
        return Keys.KEY_ANNOUNCEMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<AnnouncementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANNOUNCEMENT_IBFK_1, Keys.ANNOUNCEMENT_IBFK_2);
    }

    private transient ClassroomPath _classroom;

    /**
     * Get the implicit join path to the <code>testdb.classroom</code> table.
     */
    public ClassroomPath classroom() {
        if (_classroom == null)
            _classroom = new ClassroomPath(this, Keys.ANNOUNCEMENT_IBFK_1, null);

        return _classroom;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>testdb.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.ANNOUNCEMENT_IBFK_2, null);

        return _user;
    }

    @Override
    public Announcement as(String alias) {
        return new Announcement(DSL.name(alias), this);
    }

    @Override
    public Announcement as(Name alias) {
        return new Announcement(alias, this);
    }

    @Override
    public Announcement as(Table<?> alias) {
        return new Announcement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Announcement rename(String name) {
        return new Announcement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Announcement rename(Name name) {
        return new Announcement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Announcement rename(Table<?> name) {
        return new Announcement(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcement where(Condition condition) {
        return new Announcement(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcement where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcement where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcement where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Announcement where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Announcement where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Announcement where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Announcement where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcement whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcement whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
